package Main;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

	public class MngReportProcess implements ReportProcess{
		final String TARGET_SERVER = "jdbc:sqlserver://sonic613.database.windows.net:1433;";
		final String TARGET_DB = "ChocAn";
		
		private String connString;
		private String dbUser;
		private String dbPass;
		
		private Connection connection;
		private ResultSet resultProvSet;
		private ResultSet resultProvNameSet;
		private ResultSet resultNumProv;
		private ResultSet resultSumProv;
		private ResultSet resultNumEnctrs;
		private ResultSet resultTotalFee;

	 	// Prepared Statements
	    private PreparedStatement Stmt1;
		private PreparedStatement Stmt2;
		private PreparedStatement Stmt3;
		private PreparedStatement Stmt4;
		private PreparedStatement Stmt5;
		private PreparedStatement Stmt6;
		private PreparedStatement Stmt7;
		//
		
		private String repStartDate;
		private String repEndDate;
		
		String repString = "";
		
		final String WRITE_STMT = "INSERT INTO tbl_EFTReport(record_date,Content) VALUES(?,?);";
		
		final String QRY_PROVIDER = "SELECT DISTINCT dbo.tbl_Encounters.Prov_ID"
				+ "\nFROM dbo.tbl_Encounters"
  				+ "\nJOIN dbo.tbl_Provider ON dbo.tbl_Encounters.Prov_ID = dbo.tbl_Provider.Prov_ID"
  				+ "\nJOIN dbo.tbl_Services ON dbo.tbl_Encounters.serv_code = dbo.tbl_Services.serv_code"
  				+ "\nWHERE Enctr_date BETWEEN ? AND ?;";
		
		final String QRY_PROV_NAME = "SELECT dbo.tbl_Provider.Prov_Name AS ProviderName"
				+ "\nFROM dbo.tbl_Provider"
  				+ "\nWHERE Prov_ID=?;";
		
		final String QRY_NUMOFPROV = "SELECT COUNT(DISTINCT Prov_ID) AS NumOfProviders"
	  				+ "\nFROM dbo.tbl_Encounters"
	  				+ "\nWHERE Enctr_date BETWEEN ? AND ?;";
		
		final String QRY_NUMOF_PROV_ENCTRS = "SELECT COUNT(UID) AS NumOfConsultations"
  				+ "\nFROM dbo.tbl_Encounters"
  				+ "\nWHERE Prov_ID = ? AND Enctr_date BETWEEN ? AND ?;";
		
		final String QRY_PROV_TOTAL_FEE = "SELECT SUM(dbo.tbl_Services.SERV_fee) AS ProviderDues"
				+ "\nFROM dbo.tbl_Encounters "
				+ "\nJOIN dbo.tbl_Services ON dbo.tbl_Encounters.serv_code = dbo.tbl_Services.serv_code"
				+ "\nWHERE Prov_ID = ? AND Enctr_date BETWEEN ? AND ?;";
		
		final String QRY_TOTALFEE = "SELECT SUM(dbo.tbl_Services.SERV_fee) AS TotalDues"
				+ "\nFROM dbo.tbl_Encounters "
				+ "\nJOIN dbo.tbl_Services ON dbo.tbl_Encounters.serv_code = dbo.tbl_Services.serv_code"
				+ "\nWHERE Enctr_date BETWEEN ? AND ?;";
		
		
		public MngReportProcess(String user, String password){
			init(user, password);
		}
		
		private void init(String user, String password){
	    	this.dbUser = user;
	    	this.dbPass = password;
	    	this.connString = TARGET_SERVER + ";" 
	                + "database="+ TARGET_DB + ";"
	                + "user=" + dbUser + ";"
	                + "password={" + dbPass + "};"
	                + "encrypt=true;"
	                + "trustServerCertificate=false;"
	                + "hostNameInCertificate=*.database.windows.net;"
	                + "loginTimeout=60;";
	  

	    	try {
	            connection = DriverManager.getConnection(connString);
	            Stmt1 = connection.prepareStatement(QRY_PROVIDER);
	            Stmt2 = connection.prepareStatement(QRY_NUMOF_PROV_ENCTRS);
	            Stmt3= connection.prepareStatement(QRY_PROV_TOTAL_FEE);
	            Stmt4 = connection.prepareStatement(QRY_NUMOFPROV);
	            Stmt5 = connection.prepareStatement(QRY_TOTALFEE);
	            Stmt6 =  connection.prepareStatement(WRITE_STMT);
	            Stmt7 = connection.prepareStatement(QRY_PROV_NAME);

	    	}
	    	catch(SQLException e){
	    		e.printStackTrace();
	    	}
	    }

		private void setConnectionError(String error){
			connectionError = error;
		}
		
		public String getConnectionError(){
			return connectionError;
		}
		
		@Override
		public void computeReport(int id, String startDate, String endDate) {
			throw new UnsupportedOperationException("Alternate form of same method valid, No ID is required");

		}

		@Override
		public void computeReport(String startDate, String endDate) {
			
			repStartDate = startDate;
			repEndDate = endDate;
			try {
				Stmt1.setDate(1, java.sql.Date.valueOf(startDate));
				Stmt1.setDate(2, java.sql.Date.valueOf(endDate));
				resultProvSet = Stmt1.executeQuery();
				connection.commit();
				
				Stmt4.setDate(1, java.sql.Date.valueOf(startDate));
				Stmt4.setDate(2, java.sql.Date.valueOf(endDate));
				resultNumEnctrs = Stmt4.executeQuery();
				connection.commit();
				
				Stmt5.setDate(1, java.sql.Date.valueOf(startDate));
				Stmt5.setDate(2, java.sql.Date.valueOf(endDate));
				resultTotalFee = Stmt5.executeQuery();
				connection.commit();	
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
				
		}
		
		@Override
		public String printReport() {
			ArrayList<String> provList = new ArrayList<String>(); 
			ArrayList<String> sqlProvList = new ArrayList<String>(); 
			int enctrCount = 0, totalSum = 0;
			String name = "";
			String finalStr = "";
			String sqlFinStr = "";
			
			//Result Sets parsed into a single report string
			try {
				while(resultProvSet.next()){
					int number = resultProvSet.getInt("Prov_ID");
				
					//provider Specific statements
					Stmt2.setInt(1, number);
					Stmt2.setDate(2,java.sql.Date.valueOf(repStartDate));
					Stmt2.setDate(3,java.sql.Date.valueOf(repEndDate));
					resultNumProv = Stmt2.executeQuery();
					connection.commit();
				
					Stmt3.setInt(1, number);
					Stmt3.setDate(2,java.sql.Date.valueOf(repStartDate));
					Stmt3.setDate(3,java.sql.Date.valueOf(repEndDate));
					resultSumProv = Stmt3.executeQuery();
					connection.commit();
					
					Stmt7.setInt(1, number);
					resultProvNameSet = Stmt7.executeQuery();
					connection.commit();
				
					//Getting above values
					int count = 0, sum = 0;
				
					try {
						resultNumProv.next();
						count = resultNumProv.getInt("NumOfConsultations");
					} catch (SQLException e) {
						e.printStackTrace();
					}
				
					try {
						resultSumProv.next();
						sum = resultSumProv.getInt("ProviderDues");
					} catch (SQLException e) {
						e.printStackTrace();
					}
					
					try {
						resultProvNameSet.next();
						name = resultProvNameSet.getString("ProviderName");
					} catch (SQLException e) {
						e.printStackTrace();
					}
					
					String providerStr = "Provider ID: " + number + "\nProvider Name: " + name + "\nNumber of Consultations: " 
									+ count + "\nDues towards Provider: " + sum + "\n\n";	
					provList.add(providerStr);
					
					String sqlProvStr = "Provider ID: " + number + "," + "Provider Name: " + name + "," + "Number of Consulations: "
									+ count + "," + "Dues towards Provider: " + sum + ",";
					sqlProvList.add(sqlProvStr);		
					
				}	
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			try {
				resultNumEnctrs.next();
				enctrCount = resultNumEnctrs.getInt("NumOfProviders");

			} catch (SQLException e2) {
				e2.printStackTrace();
			}
				
			try {
				resultTotalFee.next();
				 totalSum = resultTotalFee.getInt("TotalDues");
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			finalStr = "\nTotal number of providers with more than one consultaitons : " + Integer.toString(enctrCount) + "\nTotal dues for the week : " +
					Integer.toString(totalSum);
			
			sqlFinStr = ",Total number of providers with more than one consultaitons: " + Integer.toString(enctrCount) + "," + "Total dues for the week : " + 
					Integer.toString(totalSum) + ",";
			
			//putting together string for reporting
			String tempStr1 = "";
			for(int i=0;i<provList.size();i++){
				tempStr1 += provList.get(i) + "\n";
			}
			
			String tempStr2 = "";
			for(int i=0;i<sqlProvList.size();i++){
				tempStr2 += sqlProvList.get(i);
			}
			//
			repString = tempStr2 + sqlFinStr;
			
			return tempStr1 + finalStr;
		}

		@Override
		public void termConnection() {
			try {
				Stmt1.close();
				Stmt2.close();
				Stmt3.close();
				Stmt4.close();
				Stmt5.close();
				Stmt6.close();
				resultProvSet.close();
				resultNumProv.close();
				resultSumProv.close();
				resultNumEnctrs.close();
				resultTotalFee.close();
				connection.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		@Override
		public void saveReport(int ID) {
			throw new UnsupportedOperationException("Alternate form of same method valid, No ID is required");			
		}

		@Override
		public void saveReport() {
			try {
				Stmt6.setDate(1, new java.sql.Date(new Date().getTime()));
				Stmt6.setString(3, repString);
				Stmt6.executeQuery();
			} catch (SQLException e) {
				if(e.getMessage().equals("The statement did not return a result set.")){
					return;
				}
				e.printStackTrace();
			}
		}

}