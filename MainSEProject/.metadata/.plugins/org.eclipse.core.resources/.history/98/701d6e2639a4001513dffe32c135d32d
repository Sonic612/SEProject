package Graphics.Services;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParsePosition;
import java.time.LocalDate;

import Graphics.graphicsStart;
import Main.ChocAn;
import Main.SPRecordProcess;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class SPRecordController {

	/**
	 * This is the Decimal Formatter for the initialization process.
	 */
	@FXML
	DecimalFormat format = new DecimalFormat("#");

	/**
	 * This is the yes button in the AreYouSureMenu.
	 */
	@FXML
	private Button buttonYes;

	@FXML
	private Button buttonDateReset;

	@FXML
	private TextField provIDField;

	@FXML
	private TextField memIDField;

	@FXML
	private TextField servCodeField;

	@FXML
	private DatePicker encounterDatePickerField;
	
	@FXML
    private Button buttonOk;
	
	@FXML
    private Label servInfoLabel;

	@FXML
	void initialize() {
		provIDField.setTextFormatter(new TextFormatter<>(c -> {
			if (c.getControlNewText().isEmpty()) {
				return c;
			}

			ParsePosition parsePosition = new ParsePosition(0);
			Object object = format.parse(c.getControlNewText(), parsePosition);

			if (object == null || parsePosition.getIndex() < c.getControlNewText().length()) {
				return null;
			} else if (c.getControlNewText().length() > 4) {
				return null;
			} else {
				return c;
			}
		}));
		memIDField.setTextFormatter(new TextFormatter<>(c -> {
			if (c.getControlNewText().isEmpty()) {
				return c;
			}

			ParsePosition parsePosition = new ParsePosition(0);
			Object object = format.parse(c.getControlNewText(), parsePosition);

			if (object == null || parsePosition.getIndex() < c.getControlNewText().length()) {
				return null;
			} else if (c.getControlNewText().length() > 4) {
				return null;
			} else {
				return c;
			}
		}));
		servCodeField.setTextFormatter(new TextFormatter<>(c -> {
			if (c.getControlNewText().isEmpty()) {
				return c;
			}

			ParsePosition parsePosition = new ParsePosition(0);
			Object object = format.parse(c.getControlNewText(), parsePosition);

			if (object == null || parsePosition.getIndex() < c.getControlNewText().length()) {
				return null;
			} else if (c.getControlNewText().length() > 3) {
				return null;
			} else {
				return c;
			}
		}));
	}

	@FXML
	void onRecordClick(ActionEvent event) {
		if (checkEmptyErrors()) {

			Pane paneArea = new Pane();
			Label label;

			try {
				paneArea = (Pane) FXMLLoader.load(graphicsStart.class.getResource("gui/Messages/AreYouSureMenu.fxml"));
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			label = (Label) paneArea.getChildren().get(2);
			setLabel(label);
			buttonYes = (Button) paneArea.getChildren().get(0);
			onYesClick(buttonYes);

			Stage s = new Stage();
			s.setScene(new Scene(paneArea));
			s.show();
		}
	}

	@FXML
	void onCancelClick(ActionEvent event) {
		Stage s = new Stage();

		Pane mainpane = null;
		try {
			mainpane = (Pane) FXMLLoader.load(graphicsStart.class.getResource("gui/Main/MainMenu.fxml"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		s.setScene(new Scene(mainpane));
		s.setTitle("Main Menu");
		s.show();

		Node source = (Node) event.getSource();
		Stage stage = (Stage) source.getScene().getWindow();
		stage.close();
	}

	@FXML
	boolean checkEmptyErrors() {
		String fullStringError = "\nA Provider ID" + "\nA Member ID" + "\nA Service Code" + "\nAn Encounter Date";
		String errorString = "";

		if (provIDField.getText().isEmpty()) {
			errorString = errorString + "\nA Provider ID";
		}
		if (memIDField.getText().isEmpty()) {
			errorString = errorString + "\nA Member ID";
		}
		if (servCodeField.getText().isEmpty()) {
			errorString = errorString + "\nA Service Code";
		}
		if (encounterDatePickerField.getValue() == null) {
			errorString = errorString + "\nAn Encounter Date";
		}

		if((encounterDatePickerField.getValue() != null) && encounterDatePickerField.getValue().isAfter(LocalDate.now())){
			error();
			return false;
		}
		
		if (errorString.equals(fullStringError)) {
			error("\nEverything!");
			return false;
		} else if (!errorString.isEmpty()) {
			error(errorString);
			return false;
		}

		else
			return true;
	}
	
	@FXML
    void onOkClick(ActionEvent event) {
		
		if(!servCodeField.getText().equals(null)){
			servInfoLabel.setVisible(true);
			SPRecordProcess record = ChocAn.getSPRecord();
			int servCode = Integer.parseInt(servCodeField.getText());
			record.getServName(servCode);
			
		}else{
			servInfoLabel.setVisible(true);
			servInfoLabel.setText("There is no service code input.");
		}
    }

	@FXML
	void onDateResetClick(ActionEvent event) {
		encounterDatePickerField.setValue(null);
		buttonDateReset.setVisible(false);
	}

	@FXML
	void onEncounterDateClick(ActionEvent event) {
		buttonDateReset.setVisible(true);
	}

	/**
	 * The action when the user clicks the yes button in the AreYouSureMenu.
	 * 
	 * @param button
	 * @param zipCode
	 * @param memID
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML
	void onYesClick(Button button) {
		button.setOnAction(new EventHandler() {

			@Override
			public void handle(Event event) {
				SPRecordProcess sPRecord = ChocAn.getSPRecord();
				System.out.println("Clicked Yes for New Member.");
				String doesNotExist;

				int provID = Integer.parseInt(provIDField.getText());
				int memID = Integer.parseInt(memIDField.getText());
				int servCode = Integer.parseInt(servCodeField.getText());

				doesNotExist = sPRecord.addRecord(provID, memID, servCode,
						encounterDatePickerField.getValue().toString());

				Pane messagePane = null;
				try {
					messagePane = (Pane) FXMLLoader
							.load(graphicsStart.class.getResource("gui/Messages/ErrorMessageMenu.fxml"));
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				Label label;

				label = (Label) messagePane.getChildren().get(1);
				setMessageLabel(label, doesNotExist);

				Stage s = new Stage();
				s.setScene(new Scene(messagePane));
				s.setTitle("Error!");
				s.show();

				Node source = (Node) event.getSource();
				Stage stage = (Stage) source.getScene().getWindow();
				stage.close();

			}

			/**
			 * This sets up a success/failure message label in an error message
			 * menu.
			 * 
			 * @param label
			 * @param doesNotExist
			 */
			@FXML
			void setMessageLabel(Label label, String doesNotExist) {
				// System.out.println(doesNotExist);
				label.setText(doesNotExist);
			}

		});

	}

	/**
	 * Sets up label of the AreYouSureMenu.
	 * 
	 * @param l
	 */
	@FXML
	void setLabel(Label l) {
		l.setText(l.getText() + "\nProvider ID:\t" + provIDField.getText() + "\nMember ID:\t" + memIDField.getText()
				+ "\nService Code:\t" + servCodeField.getText() + "\nEncounter Date:\t\t"
				+ encounterDatePickerField.getValue().toString());
	}
	
	@FXML
	void setErrorLabel(Label l) {
		l.setText(l.getText() + "Your encounter date must be before today.");
	}
	
	@FXML
	void setErrorLabel(Label l, String str) {
		l.setText(l.getText() + "To record the encounter report you need: " + str);
	}
	
	@FXML
	void error() {
		// Error Menu setup
		GridPane paneArea = new GridPane();
		Label label;

		try {
			paneArea = (GridPane) FXMLLoader
					.load(graphicsStart.class.getResource("gui/Messages/ErrorMessageMenu.fxml"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		label = (Label) paneArea.getChildren().get(1);
		setErrorLabel(label);

		Stage s = new Stage();
		s.setScene(new Scene(paneArea));
		s.setTitle("Error!");
		s.show();
	}
	
	@FXML
	void error(String str) {
		// Error Menu setup
		GridPane paneArea = new GridPane();
		Label label;

		try {
			paneArea = (GridPane) FXMLLoader
					.load(graphicsStart.class.getResource("gui/Messages/ErrorMessageMenu.fxml"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		label = (Label) paneArea.getChildren().get(1);
		setErrorLabel(label, str);

		Stage s = new Stage();
		s.setScene(new Scene(paneArea));
		s.setTitle("Error!");
		s.show();
	}

}
